/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfaces;

import bancodedados.ClienteBD;
import bancodedados.ConexaoPDF;
import bancodedados.ProfissionalBD;
import bancodedados.ReciboBD;
import bancodedados.RepresentanteBD;
import bancodedados.TraBD;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import modelo.tabelas.ModeloTabelaClientes;
import modelo.tabelas.ModeloTabelaProfissionais;
import modelo.tabelas.ModeloTabelaRepresentantes;
import modelo.tabelas.ModeloTabelaTra;
import modelos.Cliente;
import modelos.LetrasMaiusculas;
import modelos.Profissional;
import modelos.Recibo;
import modelos.Representante;
import modelos.Tra;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;
import net.sf.nachocalendar.CalendarFactory;
import net.sf.nachocalendar.components.DateField;

/**
 *
 * @author Jean
 */
public class jifFormTra extends javax.swing.JInternalFrame {

    DateField dataAtual = CalendarFactory.createDateField();
    /**
     * Creates new form jifFormTra
     */
    /**
     * Definição de ArrayList's
     */
    ArrayList<Tra> listaOriginalTemporariaTra = new ArrayList();

    /**
     * Objetos temporarios
     */
    Tra traCadastro = new Tra();
    Cliente clienteTemporario = new Cliente();
    Profissional profissionalTemporario = new Profissional();
    Representante representanteTemporario1 = new Representante();
    Representante representanteTemporario2 = new Representante();

    /**
     * Classes de definição de modelos de tabela
     */
    ModeloTabelaTra modeloTabelaTra = new ModeloTabelaTra();
    ModeloTabelaClientes modeloTabelaClientes;
    ModeloTabelaProfissionais modeloTabelaProfissionais;
    ModeloTabelaRepresentantes modeloTabelaRepresentantes;

    /**
     * Objetos temporarios
     */
    TraBD conexaoTabelaTra = new TraBD();
    ClienteBD conexaoTabelaClientes = new ClienteBD();
    ProfissionalBD conexaoTabelaProfissionais = new ProfissionalBD();
    RepresentanteBD conexaoTabelaRepresentante1 = new RepresentanteBD();
    RepresentanteBD conexaoTabelaRepresentante2 = new RepresentanteBD();

    Connection conexao = null;
    PreparedStatement pst = null;
    ResultSet rs = null;

    public jifFormTra() {
        initComponents();
        conexao = ConexaoPDF.conector();

        Calendar cal = Calendar.getInstance();
        dataAtual.setBaseDate(cal.getTime());
        pnDataAtual.add(dataAtual);
        setFrameIcon(new ImageIcon(this.getClass().getResource("/imagens/icon.png")));
        //Definindo o botão DateField (Data Inicio do Semestre) para seleção de uma data e atribuindo uma ação de mudança à ele.
        dataAtual.setSize((pnDataAtual.getWidth()), (pnDataAtual.getHeight()));

        btCancelarAtualizacaoTra.setVisible(false);

        tbTra.setModel(modeloTabelaTra);

        //----------------buscas na tabela--------------------------------------
        buscarTraTabela();

        tfTraCliente.setDocument(new LetrasMaiusculas());
        tfTraProfissional.setDocument(new LetrasMaiusculas());
        tfTraRepresentante1.setDocument(new LetrasMaiusculas());
        tfTraRepresentante2.setDocument(new LetrasMaiusculas());
        tfTraNArtigo.setDocument(new LetrasMaiusculas());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tpnAbasTra = new javax.swing.JTabbedPane();
        pnCadastrarNovosTra = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        tfTraRepresentante2 = new javax.swing.JTextField();
        tfTraRepresentante1 = new javax.swing.JTextField();
        tfTraProfissional = new javax.swing.JTextField();
        tfTraCliente = new javax.swing.JTextField();
        rbTraLocalizado = new javax.swing.JRadioButton();
        rbTraAselocalizar = new javax.swing.JRadioButton();
        rbTraJaInstalado = new javax.swing.JRadioButton();
        rbTraAseinstalar = new javax.swing.JRadioButton();
        rbTraNaoDeclara = new javax.swing.JRadioButton();
        rbTraDeclara = new javax.swing.JRadioButton();
        jLabel11 = new javax.swing.JLabel();
        pnDataAtual = new com.toedter.calendar.JDayChooser();
        jLabel12 = new javax.swing.JLabel();
        tfTraNArtigo = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        btFinalizarCadastroTra = new javax.swing.JButton();
        btCancelarAtualizacaoTra = new javax.swing.JButton();
        pnGerenciarTra = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        tfPalavraChaveTra = new javax.swing.JTextField();
        ckbTraCliente = new javax.swing.JCheckBox();
        ckbTraProfissional = new javax.swing.JCheckBox();
        ckbTraRepresentante = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbTra = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        btEditarTra = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();
        btExcluirTra = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("Termo de Responsabilidade Ambiental");
        setPreferredSize(new java.awt.Dimension(515, 600));

        jLabel1.setText("Cliente:");

        jLabel2.setText("Profissional:");

        jLabel3.setText("1° Representante:");

        jLabel4.setText("2° Representante:");

        jLabel5.setText("Locallizado:");

        jLabel6.setText("Instalado:");

        jLabel7.setText("Declaração:");

        tfTraRepresentante2.setEditable(false);
        tfTraRepresentante2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfTraRepresentante2MouseClicked(evt);
            }
        });

        tfTraRepresentante1.setEditable(false);
        tfTraRepresentante1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfTraRepresentante1MouseClicked(evt);
            }
        });

        tfTraProfissional.setEditable(false);
        tfTraProfissional.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfTraProfissionalMouseClicked(evt);
            }
        });

        tfTraCliente.setEditable(false);
        tfTraCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfTraClienteMouseClicked(evt);
            }
        });

        rbTraLocalizado.setText("localizado");
        rbTraLocalizado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbTraLocalizadoActionPerformed(evt);
            }
        });

        rbTraAselocalizar.setText("a se localizar");
        rbTraAselocalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbTraAselocalizarActionPerformed(evt);
            }
        });

        rbTraJaInstalado.setText("ja instalado");
        rbTraJaInstalado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbTraJaInstaladoActionPerformed(evt);
            }
        });

        rbTraAseinstalar.setText("a se instalar");
        rbTraAseinstalar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbTraAseinstalarActionPerformed(evt);
            }
        });

        rbTraNaoDeclara.setText("nada mais a declarar");
        rbTraNaoDeclara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbTraNaoDeclaraActionPerformed(evt);
            }
        });

        rbTraDeclara.setText("declaramos o que consta em anexo no FCE");
        rbTraDeclara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbTraDeclaraActionPerformed(evt);
            }
        });

        jLabel11.setText("Data:");

        jLabel12.setText("ART N°:");

        btFinalizarCadastroTra.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/complete-file.png"))); // NOI18N
        btFinalizarCadastroTra.setToolTipText("Cadastrar");
        btFinalizarCadastroTra.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btFinalizarCadastroTra.setPreferredSize(new java.awt.Dimension(150, 150));
        btFinalizarCadastroTra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFinalizarCadastroTraActionPerformed(evt);
            }
        });

        btCancelarAtualizacaoTra.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/if_edit-not-validated_85308.png"))); // NOI18N
        btCancelarAtualizacaoTra.setToolTipText("Cancelar");
        btCancelarAtualizacaoTra.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btCancelarAtualizacaoTra.setPreferredSize(new java.awt.Dimension(150, 150));
        btCancelarAtualizacaoTra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelarAtualizacaoTraActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(btCancelarAtualizacaoTra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 180, Short.MAX_VALUE)
                .addComponent(btFinalizarCadastroTra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btCancelarAtualizacaoTra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btFinalizarCadastroTra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout pnCadastrarNovosTraLayout = new javax.swing.GroupLayout(pnCadastrarNovosTra);
        pnCadastrarNovosTra.setLayout(pnCadastrarNovosTraLayout);
        pnCadastrarNovosTraLayout.setHorizontalGroup(
            pnCadastrarNovosTraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCadastrarNovosTraLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnCadastrarNovosTraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnCadastrarNovosTraLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rbTraDeclara))
                    .addGroup(pnCadastrarNovosTraLayout.createSequentialGroup()
                        .addGroup(pnCadastrarNovosTraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(8, 8, 8)
                        .addGroup(pnCadastrarNovosTraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfTraRepresentante2)
                            .addComponent(tfTraRepresentante1)
                            .addComponent(tfTraProfissional)
                            .addComponent(tfTraCliente)))
                    .addGroup(pnCadastrarNovosTraLayout.createSequentialGroup()
                        .addGroup(pnCadastrarNovosTraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12))
                        .addGap(43, 43, 43)
                        .addGroup(pnCadastrarNovosTraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pnDataAtual, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rbTraNaoDeclara)
                            .addGroup(pnCadastrarNovosTraLayout.createSequentialGroup()
                                .addGroup(pnCadastrarNovosTraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rbTraJaInstalado)
                                    .addComponent(rbTraLocalizado))
                                .addGap(18, 18, 18)
                                .addGroup(pnCadastrarNovosTraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rbTraAseinstalar)
                                    .addComponent(rbTraAselocalizar)))
                            .addComponent(tfTraNArtigo))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnCadastrarNovosTraLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnCadastrarNovosTraLayout.setVerticalGroup(
            pnCadastrarNovosTraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCadastrarNovosTraLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(pnCadastrarNovosTraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tfTraCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnCadastrarNovosTraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tfTraProfissional, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnCadastrarNovosTraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tfTraRepresentante1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnCadastrarNovosTraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(tfTraRepresentante2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnCadastrarNovosTraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(rbTraLocalizado)
                    .addComponent(rbTraAselocalizar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnCadastrarNovosTraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(rbTraJaInstalado)
                    .addComponent(rbTraAseinstalar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnCadastrarNovosTraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(rbTraDeclara)
                    .addComponent(rbTraNaoDeclara))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnCadastrarNovosTraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(tfTraNArtigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnCadastrarNovosTraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnDataAtual, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tpnAbasTra.addTab("Gerar Relatorio TRA", pnCadastrarNovosTra);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Filtro de Busca", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        jLabel10.setText("Palavra-chave:");

        tfPalavraChaveTra.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfPalavraChaveTraKeyReleased(evt);
            }
        });

        ckbTraCliente.setText("Cliente");

        ckbTraProfissional.setText("Profissional");

        ckbTraRepresentante.setText("1° Representante");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(ckbTraCliente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ckbTraProfissional)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ckbTraRepresentante)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(tfPalavraChaveTra))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(tfPalavraChaveTra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ckbTraCliente)
                    .addComponent(ckbTraProfissional)
                    .addComponent(ckbTraRepresentante))
                .addContainerGap(11, Short.MAX_VALUE))
        );

        tbTra.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tbTra);

        btEditarTra.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/edit-file.png"))); // NOI18N
        btEditarTra.setToolTipText("Editar");
        btEditarTra.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btEditarTra.setPreferredSize(new java.awt.Dimension(150, 150));
        btEditarTra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEditarTraActionPerformed(evt);
            }
        });

        btnImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/printer-128.png"))); // NOI18N
        btnImprimir.setToolTipText("Gerar PDF");
        btnImprimir.setPreferredSize(new java.awt.Dimension(150, 150));
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        btExcluirTra.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/delete-file.png"))); // NOI18N
        btExcluirTra.setToolTipText("Excluir");
        btExcluirTra.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btExcluirTra.setPreferredSize(new java.awt.Dimension(150, 150));
        btExcluirTra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExcluirTraActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(btExcluirTra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(btEditarTra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btExcluirTra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btEditarTra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout pnGerenciarTraLayout = new javax.swing.GroupLayout(pnGerenciarTra);
        pnGerenciarTra.setLayout(pnGerenciarTraLayout);
        pnGerenciarTraLayout.setHorizontalGroup(
            pnGerenciarTraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnGerenciarTraLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnGerenciarTraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnGerenciarTraLayout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(pnGerenciarTraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnGerenciarTraLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        pnGerenciarTraLayout.setVerticalGroup(
            pnGerenciarTraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnGerenciarTraLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 246, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(pnGerenciarTraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnGerenciarTraLayout.createSequentialGroup()
                    .addContainerGap(139, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(194, Short.MAX_VALUE)))
        );

        tpnAbasTra.addTab("Gerenciar Relatorios TRA", pnGerenciarTra);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tpnAbasTra)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tpnAbasTra)
        );

        setBounds(0, 0, 515, 600);
    }// </editor-fold>//GEN-END:initComponents

    public void buscarTraTabela() {
        modeloTabelaTra.inserirListaTra(conexaoTabelaTra.selecionarTodosTra());
        listaOriginalTemporariaTra = modeloTabelaTra.retornaListaTra();
        tbTra.updateUI();
    }

    private void tfTraClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfTraClienteMouseClicked
        // TODO add your handling code here:
        TelaRelatorioCliente telaRelatorioCliente = new TelaRelatorioCliente(null, true, 4);
        telaRelatorioCliente.setVisible(true);
        // Criando o contratante à receber o contratante da tela relatoriorecibo
        Cliente clienteSelecionado = new Cliente();
        clienteSelecionado = telaRelatorioCliente.retornarClienteSelecionado();
        if (clienteSelecionado != null) {
            tfTraCliente.setText(clienteSelecionado.getCliente_nome());
            clienteTemporario = telaRelatorioCliente.retornarClienteSelecionado();
        }
    }//GEN-LAST:event_tfTraClienteMouseClicked

    private void tfTraProfissionalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfTraProfissionalMouseClicked
        // TODO add your handling code here:
        TelaRelatorioProfissional telaRelatorioReciboProfissional = new TelaRelatorioProfissional(null, true);
        telaRelatorioReciboProfissional.setVisible(true);
        // Criando o cliente à receber o cliente da tela relatoriorecibo
        Profissional profissionalSelecionado = new Profissional();
        profissionalSelecionado = telaRelatorioReciboProfissional.retornarProfissionalSelecionado();
        if (profissionalSelecionado != null) {
            tfTraProfissional.setText(profissionalSelecionado.getProfissional_nome());
            profissionalTemporario = telaRelatorioReciboProfissional.retornarProfissionalSelecionado();
        }
    }//GEN-LAST:event_tfTraProfissionalMouseClicked

    private void tfTraRepresentante1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfTraRepresentante1MouseClicked
        // TODO add your handling code here:
        TelaRelatorioRepresentante telaRelatorioRepresentante = new TelaRelatorioRepresentante(null, true);
        telaRelatorioRepresentante.setVisible(true);
        // Criando o cliente à receber o cliente da tela relatoriorecibo
        Representante representanteSelecionado = new Representante();
        representanteSelecionado = telaRelatorioRepresentante.retornarRepresentanteSelecionado();
        if (representanteSelecionado != null) {
            tfTraRepresentante1.setText(representanteSelecionado.getRepresentante_nome());
            representanteTemporario1 = telaRelatorioRepresentante.retornarRepresentanteSelecionado();
        }
    }//GEN-LAST:event_tfTraRepresentante1MouseClicked

    private void tfTraRepresentante2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfTraRepresentante2MouseClicked
        // TODO add your handling code here:
        TelaRelatorioRepresentante telaRelatorioRepresentante = new TelaRelatorioRepresentante(null, true);
        telaRelatorioRepresentante.setVisible(true);
        // Criando o cliente à receber o cliente da tela relatoriorecibo
        Representante representanteSelecionado = new Representante();
        representanteSelecionado = telaRelatorioRepresentante.retornarRepresentanteSelecionado();
        if (representanteSelecionado != null) {
            tfTraRepresentante2.setText(representanteSelecionado.getRepresentante_nome());
            representanteTemporario2 = telaRelatorioRepresentante.retornarRepresentanteSelecionado();
        }
    }//GEN-LAST:event_tfTraRepresentante2MouseClicked

    private void tfPalavraChaveTraKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfPalavraChaveTraKeyReleased
        // TODO add your handling code here:
        if (tfPalavraChaveTra.getText().isEmpty()) {
            modeloTabelaTra.inserirListaTra(conexaoTabelaTra.selecionarTodosTra());
        } else {

            modeloTabelaTra.inserirListaTra(conexaoTabelaTra.selecionarTodosTra());
            listaOriginalTemporariaTra.clear();

            if (ckbTraCliente.isSelected()) {
                for (int i = 0; i < modeloTabelaTra.retornaListaTra().size(); i++) {
                    if (modeloTabelaTra.retornaListaTra().get(i).getTra_cliente().toLowerCase().contains(tfPalavraChaveTra.getText().toLowerCase())) {
                        listaOriginalTemporariaTra.add(modeloTabelaTra.retornaListaTra().get(i));
                    }
                }
            } else if (ckbTraRepresentante.isSelected()) {
                for (int i = 0; i < modeloTabelaTra.retornaListaTra().size(); i++) {
                    if (modeloTabelaTra.retornaListaTra().get(i).getTra_representante1().toLowerCase().contains(tfPalavraChaveTra.getText().toLowerCase())) {
                        listaOriginalTemporariaTra.add(modeloTabelaTra.retornaListaTra().get(i));
                    }
                }
            } else if (ckbTraProfissional.isSelected()) {
                for (int i = 0; i < modeloTabelaTra.retornaListaTra().size(); i++) {
                    if (modeloTabelaTra.retornaListaTra().get(i).getTra_profissional1().toLowerCase().contains(tfPalavraChaveTra.getText().toLowerCase())) {
                        listaOriginalTemporariaTra.add(modeloTabelaTra.retornaListaTra().get(i));
                    }
                }
            }

            modeloTabelaTra.inserirListaTra(listaOriginalTemporariaTra);

        }

        tbTra.updateUI();
    }//GEN-LAST:event_tfPalavraChaveTraKeyReleased

    private void btFinalizarCadastroTraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFinalizarCadastroTraActionPerformed
        if (tfTraCliente.getText().isEmpty()) {
            JOptionPane.showMessageDialog(tpnAbasTra, "Por favor selecione o cliente", "Aviso", 2);
            tfTraCliente.requestFocus();
        } else {
            if (tfTraProfissional.getText().isEmpty()) {
                JOptionPane.showMessageDialog(tpnAbasTra, "Por favor selecione o profissional", "Aviso", 2);
                tfTraProfissional.requestFocus();
            } else {
                if (tfTraRepresentante1.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(tpnAbasTra, "Por favor selecione o representante", "Aviso", 2);
                    tfTraRepresentante1.requestFocus();
                } else {
                    if (btFinalizarCadastroTra.getToolTipText().equals("Cadastrar")) {
                        conexaoTabelaTra.inserirNovoTra(preencherDadosCadastroTra());
                        buscarTraTabela();
                        limparCamposCadastroTra();
                    } else {
                        conexaoTabelaTra.alterarTra(modeloTabelaTra.retornaListaTra().get(tbTra.getSelectedRow()).getTra_id(), preencherDadosCadastroTra());

                        buscarTraTabela();
                        limparCamposCadastroTra();
                    }
                }
            }

    }//GEN-LAST:event_btFinalizarCadastroTraActionPerformed
    }
    private void btEditarTraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEditarTraActionPerformed
        // TODO add your handling code here:
        if (tbTra.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(rootPane, "Não existem relatorios selecionados para serem editados");
        } else {

            Tra tra = modeloTabelaTra.retornaListaTra().get(tbTra.getSelectedRow());
            //Contratante contratant =  new Contratante();
            // ArrayList<Contratante> contratante = conexaoTabelaContratante.selecionarContratanteEspecifico(recibo.getContratante_id());
            // ArrayList<Profissional> profissional = conexaoTabelaProfissionais.selecionarProfissionalEspecifico(recibo.getProfissional_id());

            //System.out.println(contratante.get(0).getContratante_empresa());
            // tfReciboContratante.setText();
            tfTraCliente.setText(tra.getTra_cliente());
            tfTraProfissional.setText(tra.getTra_profissional1());
            tfTraRepresentante1.setText(tra.getTra_representante1());
            tfTraRepresentante2.setText(tra.getTra_representante2());
            tfTraNArtigo.setText(tra.getTra_n_artigo());
            clienteTemporario.setCliente_id(tra.getCliente_id());
            profissionalTemporario.setProfissional_id(tra.getProfissional_id1());
            representanteTemporario1.setRepresentante_id(tra.getRepresentante_id1());
            representanteTemporario2.setRepresentante_id(tra.getRepresentante_id1());

            Date data1 = tra.getTra_data().getTime();

            dataAtual.setValue(data1);

            DateFormat df = DateFormat.getDateInstance(DateFormat.LONG);
            // Date d = new Date();
            //traCadastro.setTra_data(df.format(c.getTime()));
            System.out.println("TESTE" + df.format(data1.getTime()));

            if (tra.getTra_localizado() == 1) {
                rbTraLocalizado.setSelected(true);
            }

            if (tra.getTra_localizado() == 0) {
                rbTraAselocalizar.setSelected(true);
            }

            if (tra.getTra_instalado() == 1) {
                rbTraJaInstalado.setSelected(true);
            }
            if (tra.getTra_instalado() == 0) {
                rbTraAseinstalar.setSelected(true);
            }

            if (tra.getTra_declaracao() == 0) {
                rbTraNaoDeclara.setSelected(true);
            }
            if (tra.getTra_declaracao() == 1) {
                rbTraDeclara.setSelected(true);
            }

            tpnAbasTra.setSelectedIndex(0); // Mudando para a PRIMEIRA aba

            btFinalizarCadastroTra.setToolTipText("Atualizar");
            tpnAbasTra.setTitleAt(0, "Atualizar dados");
            tpnAbasTra.setEnabledAt(1, false);
            btCancelarAtualizacaoTra.setVisible(true);
        }
    }//GEN-LAST:event_btEditarTraActionPerformed

    private void btExcluirTraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExcluirTraActionPerformed
        // TODO add your handling code here:
        if (tbTra.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(rootPane, "Não existem relatorios selecionados para serem deletados");
        } else if (tbTra.getRowCount() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Não existem mais relatorios para serem deletados");
        } else if (JOptionPane.showConfirmDialog(rootPane, "Deseja realmente excluir esse relatorio?", "Excluir relatorio", 0) == 0) {
            if (tbTra.getSelectedRow() != -1) {
                conexaoTabelaTra.removerTra(modeloTabelaTra.retornaListaTra().get(tbTra.getSelectedRow()).getTra_id());
                modeloTabelaTra.inserirListaTra(conexaoTabelaTra.selecionarTodosTra());

                tbTra.updateUI();
            }
        }
    }//GEN-LAST:event_btExcluirTraActionPerformed

    private void rbTraLocalizadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbTraLocalizadoActionPerformed
        // TODO add your handling code here:
        rbTraAselocalizar.setSelected(false);
    }//GEN-LAST:event_rbTraLocalizadoActionPerformed

    private void rbTraAselocalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbTraAselocalizarActionPerformed
        // TODO add your handling code here:
        rbTraLocalizado.setSelected(false);
    }//GEN-LAST:event_rbTraAselocalizarActionPerformed

    private void rbTraJaInstaladoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbTraJaInstaladoActionPerformed
        // TODO add your handling code here:
        rbTraAseinstalar.setSelected(false);
    }//GEN-LAST:event_rbTraJaInstaladoActionPerformed

    private void rbTraAseinstalarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbTraAseinstalarActionPerformed
        // TODO add your handling code here:
        rbTraJaInstalado.setSelected(false);
    }//GEN-LAST:event_rbTraAseinstalarActionPerformed

    private void rbTraNaoDeclaraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbTraNaoDeclaraActionPerformed
        // TODO add your handling code here:
        rbTraDeclara.setSelected(false);
    }//GEN-LAST:event_rbTraNaoDeclaraActionPerformed

    private void rbTraDeclaraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbTraDeclaraActionPerformed
        // TODO add your handling code here:
        rbTraNaoDeclara.setSelected(false);
    }//GEN-LAST:event_rbTraDeclaraActionPerformed

    private void btCancelarAtualizacaoTraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelarAtualizacaoTraActionPerformed
        // TODO add your handling code here:
        if (JOptionPane.showConfirmDialog(rootPane, "Deseja mesmo cancelar as alterações", "Aviso", 0) == 0) {
            btFinalizarCadastroTra.setToolTipText("Cadastrar");
            btCancelarAtualizacaoTra.setVisible(false);
            tpnAbasTra.setEnabledAt(1, true);
            tpnAbasTra.setSelectedIndex(1);
            tpnAbasTra.setTitleAt(0, "Gerar TRA");
            tfTraCliente.setText("");
            tfTraProfissional.setText("");
            tfTraRepresentante1.setText("");
            tfTraRepresentante2.setText("");
            tfTraNArtigo.setText("");
            Date d = new Date();
            dataAtual.setValue(d);
            rbTraLocalizado.setSelected(false);
            rbTraAselocalizar.setSelected(false);
            rbTraJaInstalado.setSelected(false);
            rbTraAseinstalar.setSelected(false);
            rbTraDeclara.setSelected(false);
            rbTraNaoDeclara.setSelected(false);
        }
    }//GEN-LAST:event_btCancelarAtualizacaoTraActionPerformed

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:ddd
        if (tbTra.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(rootPane, "Não existem relatorios selecionados para serem imprimidos");
        } else {

            Tra tra = modeloTabelaTra.retornaListaTra().get(tbTra.getSelectedRow());
            tra.getTra_id();
            try {
                //usando a clsse HashMap para criar um filtro
                //  JOptionPane.showMessageDialog(rootPane, recibo.getRecibo_id());
                HashMap filtro = new HashMap();
                filtro.put("id", tra.getTra_id());
                //Usando a classe JasperPrint para preparar a impressão de um relatório
                JasperPrint print = JasperFillManager.fillReport("build/classes/reports/TRA.jasper", filtro, conexao);
                //a linha abaixo exibe o relatório através da classe JasperViewer
                JasperViewer.viewReport(print, false);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }

        }
    }//GEN-LAST:event_btnImprimirActionPerformed

    public Tra preencherDadosCadastroTra() {

        traCadastro.setCliente_id(clienteTemporario.getCliente_id());
        System.out.println(profissionalTemporario.getProfissional_id());
        traCadastro.setProfissional_id1(profissionalTemporario.getProfissional_id());
        traCadastro.setRepresentante_id1(representanteTemporario1.getRepresentante_id());
        traCadastro.setRepresentante_id2(representanteTemporario2.getRepresentante_id());
        traCadastro.setTra_cliente(tfTraCliente.getText());
        traCadastro.setTra_profissional1(tfTraProfissional.getText());
        traCadastro.setTra_representante1(tfTraRepresentante1.getText());
        traCadastro.setTra_representante2(tfTraRepresentante2.getText());

        if (rbTraLocalizado.isSelected()) {
            traCadastro.setTra_localizado(1);

        }
        if (rbTraAselocalizar.isSelected()) {
            traCadastro.setTra_localizado(0);

        }
        if (rbTraJaInstalado.isSelected()) {
            traCadastro.setTra_instalado(1);

        }
        if (rbTraAseinstalar.isSelected()) {
            traCadastro.setTra_instalado(0);

        }
        if (rbTraNaoDeclara.isSelected()) {
            traCadastro.setTra_declaracao(0);
        }
        if (rbTraDeclara.isSelected()) {
            traCadastro.setTra_declaracao(1);

        }
        Calendar cal = Calendar.getInstance();
        cal.setTime((Date) dataAtual.getValue());
        //DateFormat df = DateFormat.getDateInstance(DateFormat.LONG);
        // Date d = new Date();

        //traCadastro.setTra_data(df.format(c.getTime()));
        traCadastro.setTra_data(cal);

        traCadastro.setTra_n_artigo(tfTraNArtigo.getText());

        return traCadastro;

    }

    public void limparCamposCadastroTra() {
        tfTraCliente.setText("");
        tfTraProfissional.setText("");
        tfTraRepresentante1.setText("");
        tfTraRepresentante2.setText("");
        tfTraNArtigo.setText("");
        Date d = new Date();
        dataAtual.setValue(d);

        rbTraLocalizado.setSelected(false);
        rbTraAselocalizar.setSelected(false);
        rbTraJaInstalado.setSelected(false);
        rbTraAseinstalar.setSelected(false);
        rbTraDeclara.setSelected(false);
        rbTraNaoDeclara.setSelected(false);
        tpnAbasTra.setTitleAt(0, "Cadastrar Novo TRA");
        btFinalizarCadastroTra.setToolTipText("Cadastrar");
        tpnAbasTra.setEnabledAt(1, true);
        tpnAbasTra.setSelectedIndex(1);
        btCancelarAtualizacaoTra.setVisible(false);

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCancelarAtualizacaoTra;
    private javax.swing.JButton btEditarTra;
    private javax.swing.JButton btExcluirTra;
    private javax.swing.JButton btFinalizarCadastroTra;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JCheckBox ckbTraCliente;
    private javax.swing.JCheckBox ckbTraProfissional;
    private javax.swing.JCheckBox ckbTraRepresentante;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnCadastrarNovosTra;
    private com.toedter.calendar.JDayChooser pnDataAtual;
    private javax.swing.JPanel pnGerenciarTra;
    private javax.swing.JRadioButton rbTraAseinstalar;
    private javax.swing.JRadioButton rbTraAselocalizar;
    private javax.swing.JRadioButton rbTraDeclara;
    private javax.swing.JRadioButton rbTraJaInstalado;
    private javax.swing.JRadioButton rbTraLocalizado;
    private javax.swing.JRadioButton rbTraNaoDeclara;
    private javax.swing.JTable tbTra;
    private javax.swing.JTextField tfPalavraChaveTra;
    private javax.swing.JTextField tfTraCliente;
    private javax.swing.JTextField tfTraNArtigo;
    private javax.swing.JTextField tfTraProfissional;
    private javax.swing.JTextField tfTraRepresentante1;
    private javax.swing.JTextField tfTraRepresentante2;
    private javax.swing.JTabbedPane tpnAbasTra;
    // End of variables declaration//GEN-END:variables
}
